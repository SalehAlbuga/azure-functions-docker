trigger:
  branches:
    include:
      - refs/tags/4.*

pool:
  vmImage: ubuntu-latest

variables:
- name: image_list
  value: ''

steps:
  - bash: |
      # login
      set -e
      echo $pswd | docker login -u $(dockerUsername) --password-stdin funcnext.azurecr.io
    displayName: login to registry
    continueOnError: false
    env:
      pswd: $(dockerPassword)
  - bash: |
      ./host/generate-composite.sh -4 powershell
    displayName: create powershell-appservice dockerfiles
    continueOnError: false
  - bash: |
      set -e
      IMAGE_NAME=funcnext.azurecr.io/azure-functions/4/powershell:$(Build.SourceBranchName)-powershell7-next
      echo "##vso[task.setvariable variable=image_list;]$IMAGE_NAME"
      docker build -t $IMAGE_NAME \
                  -f host/4/bullseye/amd64/powershell/powershell70/powershell70.Dockerfile \
                  host/4/bullseye/amd64/powershell/powershell70
      npm run test $IMAGE_NAME --prefix  test/
      docker push $IMAGE_NAME
    displayName: powershell7
    continueOnError: false
  - bash: |
      set -e
      IMAGE_NAME=funcnext.azurecr.io/azure-functions/4/powershell:$(Build.SourceBranchName)-powershell7-slim-next
      IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
      echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"
      docker build -t $IMAGE_NAME \
                  -f host/4/bullseye/amd64/powershell/powershell70/powershell70-slim.Dockerfile \
                  host/4/bullseye/amd64/powershell/powershell70
      npm run test $IMAGE_NAME --prefix  test/
      docker push $IMAGE_NAME
    displayName: powershell7-slim
    continueOnError: false
  - bash: |
      set -e
      IMAGE_NAME=funcnext.azurecr.io/azure-functions/4/powershell:$(Build.SourceBranchName)-powershell7-appservice-next
      IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
      echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"
      docker build -t $IMAGE_NAME \
                  -f host/4/bullseye/amd64/out/powershell/powershell70-appservice.Dockerfile \
                  host/4/bullseye/amd64/out/powershell
      npm run test $IMAGE_NAME --prefix  test/
      docker push $IMAGE_NAME
    displayName: powershell7-appservice
    continueOnError: false
  - bash: |
      set -e
      IMAGE_NAME=funcnext.azurecr.io/azure-functions/4/powershell:$(Build.SourceBranchName)-powershell7.2-next
      IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
      echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"
      docker build -t $IMAGE_NAME \
                  -f host/4/bullseye/amd64/powershell/powershell72/powershell72.Dockerfile \
                  host/4/bullseye/amd64/powershell/powershell72
      npm run test $IMAGE_NAME --prefix  test/
      docker push $IMAGE_NAME
    displayName: powershell7.2
    continueOnError: false
  - bash: |
      set -e
      IMAGE_NAME=funcnext.azurecr.io/azure-functions/4/powershell:$(Build.SourceBranchName)-powershell7.2-slim-next
      IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
      echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"
      docker build -t $IMAGE_NAME \
                  -f host/4/bullseye/amd64/powershell/powershell72/powershell72-slim.Dockerfile \
                  host/4/bullseye/amd64/powershell/powershell72
      npm run test $IMAGE_NAME --prefix  test/
      docker push $IMAGE_NAME
    displayName: powershell7.2-slim
    continueOnError: false
  - bash: |
      set -e
      IMAGE_NAME=funcnext.azurecr.io/azure-functions/4/powershell:$(Build.SourceBranchName)-powershell7.2-appservice-next
      IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
      echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"
      docker build -t $IMAGE_NAME \
                  -f host/4/bullseye/amd64/out/powershell/powershell72-appservice.Dockerfile \
                  host/4/bullseye/amd64/out/powershell
      npm run test $IMAGE_NAME --prefix  test/
      docker push $IMAGE_NAME
    displayName: powershell7.2-appservice
    continueOnError: false
  - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
    displayName: 'Manifest Generator'
    inputs:
      BuildDropPath: host
      Verbosity: Verbose
      DockerImagesToScan: $(image_list)

  - task: PublishPipelineArtifact@1
    displayName: 'Publish SBOM Artifact'
    inputs:
      targetPath: host/_manifest
      artifact: SBOM-Functionsv4-Powershell-$(Build.SourceBranchName)