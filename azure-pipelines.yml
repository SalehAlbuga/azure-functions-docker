# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - refs/tags/4.*

pool:
  vmImage: ubuntu-latest

variables:
- name: image_list
  value: ''

steps:
  - bash: |
      # login
      set -e
      echo $pswd | docker login -u $(dockerUsername) --password-stdin funcnext.azurecr.io
    displayName: login to registry
    continueOnError: false
    env:
      pswd: $(dockerPassword)
  - bash: |
      ./host/generate-composite.sh -4 dotnet
    displayName: create dotnet-appservice dockerfiles
    continueOnError: false
  - bash: |
      set -e
      IMAGE_NAME=funcnext.azurecr.io/azure-functions/4/dotnet:$(Build.SourceBranchName)-next
      echo "##vso[task.setvariable variable=image_list;]$IMAGE_NAME"
      docker build -t $IMAGE_NAME \
                  -f host/4/bullseye/amd64/dotnet/dotnet-inproc/dotnet.Dockerfile \
                  host/4/bullseye/amd64/dotnet/dotnet-inproc/
      npm run test $IMAGE_NAME --prefix test/
      docker push $IMAGE_NAME
    displayName: dotnet-inproc
    continueOnError: false
  - bash: |
      set -e
      IMAGE_NAME=funcnext.azurecr.io/azure-functions/4/dotnet:$(Build.SourceBranchName)-slim-next
      IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
      echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"
      docker build -t $IMAGE_NAME \
                  -f host/4/bullseye/amd64/dotnet/dotnet-inproc/dotnet-slim.Dockerfile \
                  host/4/bullseye/amd64/dotnet/dotnet-inproc/
      npm run test $IMAGE_NAME --prefix  test/
      docker push $IMAGE_NAME
    displayName: dotnet-inproc-slim
    continueOnError: false
  - bash: |
      set -e
      IMAGE_NAME=funcnext.azurecr.io/azure-functions/4/dotnet:$(Build.SourceBranchName)-appservice-next
      IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
      echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"
      docker build -t $IMAGE_NAME \
                  -f host/4/bullseye/amd64/out/dotnet/dotnet-inproc-appservice.Dockerfile \
                  host/4/bullseye/amd64/out/dotnet/
      npm run test $IMAGE_NAME --prefix  test/
      docker push $IMAGE_NAME
    displayName: dotnet-inproc-appservice
    continueOnError: false
  - bash: |
      set -e
      IMAGE_NAME=funcnext.azurecr.io/azure-functions/4/dotnet-isolated:$(Build.SourceBranchName)-dotnet-isolated6.0-next
      IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
      echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"
      docker build -t $IMAGE_NAME \
                  -f host/4/bullseye/amd64/dotnet/dotnet-isolated/dotnet-isolated.Dockerfile \
                  host/4/bullseye/amd64/dotnet/dotnet-isolated/
      npm run test $IMAGE_NAME --prefix test/
      docker push $IMAGE_NAME
    displayName: dotnet-isolated (.NET 6)
    continueOnError: false
  - bash: |
      set -e
      IMAGE_NAME=funcnext.azurecr.io/azure-functions/4/dotnet-isolated:$(Build.SourceBranchName)-dotnet-isolated6.0-slim-next
      IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
      echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"
      docker build -t $IMAGE_NAME \
                  -f host/4/bullseye/amd64/dotnet/dotnet-isolated/dotnet-isolated-slim.Dockerfile \
                  host/4/bullseye/amd64/dotnet/dotnet-isolated/
      npm run test $IMAGE_NAME --prefix  test/
      docker push $IMAGE_NAME
    displayName: dotnet-isolated-slim (.NET 6)
    continueOnError: false
  - bash: |
      set -e
      IMAGE_NAME=funcnext.azurecr.io/azure-functions/4/dotnet-isolated:$(Build.SourceBranchName)-dotnet-isolated6.0-appservice-next
      IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
      echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"
      docker build -t $IMAGE_NAME \
                  -f host/4/bullseye/amd64/out/dotnet/dotnet-isolated-appservice.Dockerfile \
                  host/4/bullseye/amd64/out/dotnet/
      npm run test $IMAGE_NAME --prefix  test/
      docker push $IMAGE_NAME
    displayName: dotnet-isolated-appservice (.NET 6)
    continueOnError: false
  - bash: |
      set -e
      IMAGE_NAME=funcnext.azurecr.io/azure-functions/4/dotnet-isolated:$(Build.SourceBranchName)-dotnet-isolated7.0-next
      IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
      echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"
      docker build -t $IMAGE_NAME \
                  -f host/4/bullseye/amd64/dotnet/dotnet7-isolated/dotnet-isolated.Dockerfile \
                  host/4/bullseye/amd64/dotnet/dotnet7-isolated/
      npm run test $IMAGE_NAME --prefix test/
      docker push $IMAGE_NAME
    displayName: dotnet-isolated (.NET 7 Preview)
    continueOnError: false
  - bash: |
      set -e
      IMAGE_NAME=funcnext.azurecr.io/azure-functions/4/dotnet-isolated:$(Build.SourceBranchName)-dotnet-isolated7.0-slim-next
      IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
      echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"
      docker build -t $IMAGE_NAME \
                  -f host/4/bullseye/amd64/dotnet/dotnet7-isolated/dotnet-isolated-slim.Dockerfile \
                  host/4/bullseye/amd64/dotnet/dotnet7-isolated/
      npm run test $IMAGE_NAME --prefix  test/
      docker push $IMAGE_NAME
    displayName: dotnet-isolated-slim (.NET 7 Preview)
    continueOnError: false
  - bash: |
      set -e
      IMAGE_NAME=funcnext.azurecr.io/azure-functions/4/dotnet-isolated:$(Build.SourceBranchName)-dotnet-isolated7.0-appservice-next
      IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
      echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"
      docker build -t $IMAGE_NAME \
                  -f host/4/bullseye/amd64/out/dotnet/dotnet7-isolated-appservice.Dockerfile \
                  host/4/bullseye/amd64/out/dotnet/
      npm run test $IMAGE_NAME --prefix  test/
      docker push $IMAGE_NAME
    displayName: dotnet-isolated-appservice (.NET 7 Preview)
    continueOnError: false
  - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
    displayName: 'Manifest Generator'
    inputs:
      BuildDropPath: host
      Verbosity: Verbose
      DockerImagesToScan: $(image_list)

  - task: PublishPipelineArtifact@1
    displayName: 'Publish SBOM Artifact'
    inputs:
      targetPath: host/_manifest
      artifact: SBOM-Functionsv4-dotnet-$(Build.SourceBranchName)
      
# steps:
# - script: echo Hello, world!
#   displayName: 'Run a one-line script'

# - script: |
#     echo Add other tasks to build, test, and deploy your project.
#     echo See https://aka.ms/yaml
#   displayName: 'Run a multi-line script'
